#include <iostream>
#include <cstdlib>
#include <cmath>

#define MAX_N 10000 

double tab_int[MAX_N];

using namespace std;

void read(int n) { 
    
     // void wskazuje na to ze moze byc dowolny typ .

    int i;

    for (i = 0; i < n; i++) {
        cin >> tab_int[i];     //wczytuje i zapisuje cząg do tablicy .
    }
}

int f0(int n, int tab_empty) {

    if (tab_empty == 1)
        read(n);
    int i;
    double m;


    m = tab_int[0]; //pierwszy indeks

    for (i = 0; i < n; i++)
    {
        if (tab_int[i] < m) { m = tab_int[i]; }   //porównuje wartości indeksów i podmienia mescami jak sa najmniejsze wartości .



    }
    for (i = 0; i < n; i++)
        if (tab_int[i] == m) cout << i + 1 << " "; // wypisuje najmniejsze indeksy przez spacje .

    return 0;
}

int f1(int n, int tab_empty) {
    int i;
    if (tab_empty == 1)
        read(n);

    for (i = 1; i < n; ++i)
    {
        for (int r = 0; r < n - i; r++)
        {
            if (tab_int[r] < tab_int[r + 1])    //porównuje wartości indeksów jak w f0
            {

                double b;
                b = tab_int[r + 1];
                tab_int[r + 1] = tab_int[r];      // sortowanie "bąbelkowe": jeśli watroścz następnego indeksu jest większa to algorytm podmienia indeksy mejscami .
                tab_int[r] = b;
            }
        }

    }
    for (i = 0; i < n; ++i) {
        cout << tab_int[i] << " ";
    }
    cout << endl;
    return 0;
}

int f2(int n, int tab_empty) {
    int i;
    if (tab_empty == 1)
        read(n);
    double a = 0;
    for (i = 0; i < n; i++) {
        a += pow(tab_int[i], 2); //według wzoru  podnoszenei do 2 potęgi 

    }
    double d = sqrt(a); // weglug wzoru pirwiastek 
    d = floor(d); // do podłogi 

    cout << d << endl;

    return 0;
}

int f3(int n, int tab_empty) {
    int i;
    if (tab_empty == 1)
        read(n);



    double suma = 0;
    double srednia = 0;
    double suma1 = 0;
    double standard = 0;
    double suma2 = n;

    for (i = 0; i < n; i++) {
        suma += tab_int[i];
    }
    srednia = suma / n;          //szukamy srednią 

    for (i = 0; i < n; i++) {
        suma1 += pow(tab_int[i] - srednia, 2); // róznice do potęgi 2 - uzywam funkcje z f2
    }



    double suma3 = suma1 / suma2;

    standard = sqrt(suma3);    // pierwiastkujemy 

    cout << floor(standard) << endl;  //do podłogi 


    return 0;
}


int f4(int n, int tab_empty) {
    int i;
    if (tab_empty == 1)
        read(n);


    int* tab_int1;
    tab_int1 = new int[n];     

    for (i = 0; i < n; i++)
    {
        tab_int1[i] = 0;
    }

    for (i = 0; i < n; i++)
    {
        tab_int1[n - i - 1] = tab_int[i];     // obracam tablicę 

    }

    for (i = 0; i < n; i++)
    {
        tab_int[i] = tab_int1[i];         
    }

    for (i = 0; i < n; i++)
    {
        cout << tab_int[i] << " ";
    }

    delete[] tab_int1;

    return 0;
}


bool first(int n) // logiczna funkcja jaka moze zwracaz true or false tylko 
{
    if (n < 2)
        return false; // jak 1 lub 0 to false  zwraca 0 

    for (int i = 2; i * i <= n; i++)
        if (n % i == 0)                 // jak przy dzieleniu z raszta 0 to nie jest pierwsza 
            //                            algorytm wyznacza czy liczba jest pierwszą i zwraca 1 jak jest i 0 jak nie jest 
            return 0;
    return 1;
}


int f5(int n, int tab_empty) {
    int i;
    if (tab_empty == 1)
        read(n);

    for (i = 0; i < n; i++) {

        cout << first(tab_int[i]) << " "; // wypisuje wynnik z poprzedniego algorytmu 

    }

    return 0;
}
int f7(int n, int tab_empty) {

    if (tab_empty == 1)
        read(n);
    double x1;
    double x2;
    double a = tab_int[1];
    double b = tab_int[2];
    double c = tab_int[3];



    double d = (pow(b, 2)) - (4 * a * c);  // zdajduje discriminant





    if (d > 0) {
        x1 = ((-b) + sqrt(d)) / (2 * a);
        x2 = ((-b) - sqrt(d)) / (2 * a);         // użyłem wzór na znależenie pierwiastków kwadratowego równania 
        x1 = floor(x1);
        x2 = floor(x2);

        if (x1 < x2) {
            cout << x1 << " " << x2 << endl;
        }
        else  cout << x2 << " " << x1 << endl;
    }
    if (d == 0) {
        x1 = -(b / (2 * a));
        cout << x1 << "\n";
    }

    return 0;


}



int f8(int n, int tab_empty) {

    if (tab_empty == 1)
        read(n);
    double i = tab_int[0];
    double a;
    long long int b = 0;

    for (a = 1; a <= i; a++)
    {

        b += a * pow((a + 1), 2);  // sumuje podany wzór dla zadanego 'n' = a .
    }



    cout << b;
    cout << endl;




    return 0;
}


int f9(int n, int tab_empty) {

    if (tab_empty == 1)
        read(n);
    int i;


    for (i = 0; i < n; i++)
    {
       long long  c = tab_int[i];
       int num = 0;          //użyłem int,bo mi obcina do calego.
        do {
            num += c % 2;
            c = c / 2;
        } while (c > 0);     //  ze wzoru na zamiane liczb z dziesiętnych na dwójkowe

        cout << num << " "; 
    }

    return 0;
}

// nie wiem czy ktoś to czyta,ale to jest mój pierwszy program w zyciu) Przepraszam za mój niezręczny kod, skupiłem się na tym, żeby tyłko wykonywał testy .


int main() {
    int subprogram, n;

    while (cin >> subprogram >> n) {
        switch (subprogram) {
        case 0:
            f0(n, 1);
            break;
        case 1:
            f1(n, 1);
            break;
        case 2:
            f2(n, 1);
            break;
        case 3:
            f3(n, 1);
            break;
        case 4:
            f4(n, 1);
            break;
        case 5:
            f5(n, 1);
            break;
        case 7:
            f7(n, 1);
            break;
        case 8:
            f8(n, 1);
            break;
        case 9:
            f9(n, 1);
            break;
        }

    };
    return 0;
}
